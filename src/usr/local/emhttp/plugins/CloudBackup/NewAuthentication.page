Menu="CloudBackup:4"
Title="New Authentication"
Tag="table"
Markdown="false"
---
<?
#Pull some default data
libxml_use_internal_errors(true); # Suppress any warnings from xml errors.

$scriptName = "CloudBackup";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$pluginRoot = "$docroot/plugins/$scriptName";
$httpPluginRoot = "/plugins/$scriptName";

// Generate a callback url for the oAuth Server to use
function getCallback( $scriptName ) {
    if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')
        $link = "https";
    else
        $link = "http";
     
    $link .= "://";
    $link .= $_SERVER['HTTP_HOST'];
    $link = rtrim($link, '/') . "/plugins/" . $scriptName . "/callback.php";
    return $link;
}

// Generate the source url for this page
function getSource( $scriptName ) {
    if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on')
        $link = "https";
    else
        $link = "http";
     
    $link .= "://";
    $link .= $_SERVER['HTTP_HOST'];
    return $link;
}

?>
<link rel="stylesheet" href="<?=$httpPluginRoot?>/includes/style.css"></style>
<script type="text/javascript" src="<?=$httpPluginRoot?>/includes/GUI.js"></script>
    
<div class="inner-wrapper">
    <div class="row">
        <div class="col-25">Provider</div>
        <div class="col-75">
            <select id="providers">
                <option value="0">--Choose One--</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div id="providers_settings" class="col"></div>
    </div>
    <div class="row">
        <div class="col-25"></div>
        <div class="col-75">
            <button onclick="javascript:CloudBackup.authenticateProvider();">Add Provider</button>
        </div>
    </div>
</div>


<script type="text/javascript">

// Main class for the CloudBackup plugin
class CloudBackup {

    // Currently selected provider
    static currentProvider = null;

    // Currently selected provider's oAuth variables
    static currentName = null;
    static currentClientId = null;
    static currentClientSecret = null;

    // Providers and their settings
    static #providers = {
        box:{
            title: 'Box',
            name: 'box',
            fields:[
                {
                    name:'name', 
                    type:'text', 
                    placeholder:'Friendly Name', 
                    hint:'A name for this particular cloud destination', 
                    value:'',
                    changeFunction:(e) => {
                    },
                    blurFunction: (e) => {
                        let badChars =  e.target.value.match(/[^a-z0-9_\-\.]/gi);
                        if ( badChars ){
                            window.alert("Provider name can only contain letters, numbers, underscores, hyphens, and periods");
                        }else{
                            CloudBackup.currentName = e.target.value;
                        }
                    }
                },
                {
                    name:'client_id', 
                    type:'text', 
                    placeholder:'Client ID', 
                    hint:'A client id generated via box\'s developer portal', 
                    value:'',
                    blurFunction: (e) => {
                        CloudBackup.currentClientId = e.target.value;
                    }
                },
                {
                    name:'client_secret', 
                    type:'text', 
                    placeholder:'Client Secret', 
                    hint:'A client secret generated via box\'s developer portal', 
                    value:'',
                    blurFunction: (e) => {
                        CloudBackup.currentClientSecret = e.target.value;
                    }
                },
            ],
        },
        googledrive:{
            title: 'Google Drive',
            name: 'googledrive',
            fields:[
                {
                    name:'name', 
                    type:'text', 
                    placeholder:'Friendly Name', 
                    hint:'A name for this particular cloud destination', 
                    value:'',
                    changeFunction:(e) => {
                    },
                    blurFunction: (e) => {
                        let badChars =  e.target.value.match(/[^a-z0-9_\-\.]/gi);
                        if ( badChars ){
                            window.alert("Provider name can only contain letters, numbers, underscores, hyphens, and periods");
                            CloudBackup.currentName = null
                        }else{
                            CloudBackup.currentName = e.target.value;
                        }
                    }
                },
                {
                    name:'client_id', 
                    type:'text', 
                    placeholder:'Client ID', 
                    hint:'A client id generated via google\'s developer portal', 
                    value:'',
                    blurFunction: (e) => {
                        CloudBackup.currentClientId = e.target.value;
                    }
                },
                {
                    name:'client_secret', 
                    type:'text', 
                    placeholder:'Client Secret', 
                    hint:'A client secret generated via google\'s developer portal', 
                    value:'',
                    blurFunction: (e) => {
                        CloudBackup.currentClientSecret = e.target.value;
                    }
                },
            ],

        },
        dropbox: {
            title: 'Dropbox',
            name: 'dropbox',
            fields: [
                {
                    name:'name', 
                    type:'text', 
                    placeholder:'Friendly Name', 
                    hint:'A name for this particular cloud destination', 
                    value:'',
                    changeFunction:(e) => {
                    },
                    blurFunction: (e) => {
                        let badChars =  e.target.value.match(/[^a-z0-9_\-\.]/gi);
                        if ( badChars ){
                            window.alert("Provider name can only contain letters, numbers, underscores, hyphens, and periods");
                            CloudBackup.currentName = null
                        }else{
                            CloudBackup.currentName = e.target.value;
                        }
                    }
                },
                {
                    name:'client_id', 
                    type:'text', 
                    placeholder:'Client ID', 
                    hint:'A client id generated via dropbox\'s developer portal', 
                    value:'',
                    blurFunction: (e) => {
                        CloudBackup.currentClientId = e.target.value;
                    }
                },
                {
                    name:'client_secret', 
                    type:'text', 
                    placeholder:'Client Secret', 
                    hint:'A client secret generated via dropbox\'s developer portal', 
                    value:'',
                    blurFunction: (e) => {
                        CloudBackup.currentClientSecret = e.target.value;
                    }
                },
            ],
        }
    };

    static get providers(){
        return CloudBackup.#providers;
    }
   
    // Populate the provider dropdown
    static populateProvidersSelector(){
        const selector = document.querySelector("#providers");

        // Add the provider options to the selector dropdown
        for (let x in CloudBackup.#providers){
            const option = document.createElement("option");
            option.value = CloudBackup.#providers[x].name;
            option.innerText = CloudBackup.#providers[x].title;
            selector.append(option);
        }
       
    }

    static async authenticateProvider(){

        // Encode the oAuth variables
        let oAuthName = btoa( CloudBackup.currentName );
        let oAuthProvider = btoa( CloudBackup.currentProvider );
        let oAuthClientId = btoa( CloudBackup.currentClientId );
        let oAuthClientSecret = btoa( CloudBackup.currentClientSecret );
        let oAuthCallback = btoa(CloudBackup.getCallback());
        let oAuthSource = btoa(CloudBackup.getSource());
        let oAuthServer = "https://cloudbackup.progressivethink.in/UnraidCloudBackup/start";


        if ( !CloudBackup.currentProvider || !CloudBackup.currentName || !CloudBackup.currentClientId || !CloudBackup.currentClientSecret ){
            window.alert("Please fill out all fields");
            return;
        }

        // handle for the window that will be opened
        let win = null;

        // Sleep function for use in the monitoring loop
        const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay));

        // Open the oAuth window and connect to the server and wait for the page to reach the callback page on this server
        win = window.open(`${oAuthServer}?oAuthProvider=${oAuthProvider}&oAuthName=${oAuthName}&oAuthSource=${oAuthSource}&oAuthCallback=${oAuthCallback}&oAuthClientId=${oAuthClientId}&oAuthClientSecret=${oAuthClientSecret}`, 'oAuthWindow', 'width=400,height=500,left=100,top=100');
        
        // Loop breaker
        let breaker = false;

        // Monitor the window until the callback page is reached
        while ( ! breaker ) {

            try{
                if (win.location.href.startsWith( CloudBackup.getSource() )){
                    breaker = true;
                }

            }catch(e){


            }

            // Sleep for 500ms
            await sleep(500);

        }

        // Close the window
        win.close();
        location.reload();

    }

    // Generate a callback url for the oAuth Server to use
    static getCallback( scriptName = '<?=$scriptName?>' ) {

        let link = '';
        
        if ( window.location.protocol === 'https:'){
            link = 'https://';

        }else{
            link = 'http://';

        }

        link += window.location.host;
        link += `/plugins/${scriptName}/callback.php`;
        return link;
    }

    // Generate the source url for this page
    static getSource( scriptName = '<?=$scriptName?>' ) {
        let link = '';
        
        if ( window.location.protocol === 'https:'){
            link = 'https://';

        }else{
            link = 'http://';
            
        }
        
        link += window.location.host;
        return link;
    }

}

// Add an event listener for page is ready
document.addEventListener( 'DOMContentLoaded', () => {

    // Populate the Provider dropdown
    CloudBackup.populateProvidersSelector();

    // Add an event listener to the provider dropdown
    document.querySelector("#providers").addEventListener("change", (e) => {
        
        // #providers
        const providersSelector = e.target;

        // Get the settings area
        const providersSettings = document.querySelector("#providers_settings");
        
        // Clear the settings area
        providersSettings.innerHTML = "";

        // Build fields for the settings area
        let fields = CloudBackup.providers[providersSelector.value].fields;
        let gui = new GUI();

        // Append the fields to the settings area
        for (let field in fields){
            gui.appendField( fields[field] );
        }

        // Set the currently selected provider
        CloudBackup.currentProvider = providersSelector.value;

    });


});

</script>